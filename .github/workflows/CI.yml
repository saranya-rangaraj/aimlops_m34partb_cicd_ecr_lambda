name: CI Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: pip install -r requirements/requirements.txt
    - name: Train and save pipeline
      run: python iris_model/train_pipeline.py
    - uses: actions/upload-artifact@v2
      with:
        name: my-trained-pipeline
        path: iris_model/trained_models/*.pkl
        retention-days: 1

  test:
    needs: train
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v2
      with:
        name: my-trained-pipeline
        path: iris_model/trained_models
    - name: Install dependencies
      run: pip install -r requirements/test_requirements.txt
    - name: Test with pytest
      run: pytest

  build:
    needs: [train, test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - uses: actions/download-artifact@v2
      with:
        name: my-trained-pipeline
        path: iris_model/trained_models
    - name: Install dependencies
      run: pip install --upgrade build
    - name: Build package
      run: python -m build
    - uses: actions/upload-artifact@v2
      with:
        name: my-build-package
        path: dist/*.whl
        retention-days: 1

  push-image:
    needs: [train, test, build]
    runs-on: ubuntu-latest
    steps:
    - name: Repo Checkout
      uses: actions/checkout@v3

    - uses: actions/download-artifact@v2
      with:
        name: my-build-package
        path: iris_model_lambda

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Build the Docker image and push to AWS ECR
      env:
        ECR_ENDPOINT: ${{ secrets.ECR_ENDPOINT }}
      run: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_ENDPOINT
        docker build -t aimlops-iris-classification-repo .
        docker tag aimlops-iris-classification-repo:latest $ECR_ENDPOINT/aimlops-iris-classification-repo:latest
        docker push $ECR_ENDPOINT/aimlops-iris-classification-repo:latest


